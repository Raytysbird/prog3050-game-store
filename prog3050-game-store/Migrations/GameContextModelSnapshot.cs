// <auto-generated />
using System;
using GameStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("GameStore.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("GameStore.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("GameStore.Models.CreditCardInfo", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("credit_card_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ccc")
                        .HasColumnName("ccc");

                    b.Property<string>("ExpDate")
                        .HasColumnName("exp_date")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("Number")
                        .HasColumnName("number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasMaxLength(450);

                    b.HasKey("CreditCardId");

                    b.HasIndex("UserId");

                    b.ToTable("Credit Card Info");
                });

            modelBuilder.Entity("GameStore.Models.FavouriteCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourite Category");
                });

            modelBuilder.Entity("GameStore.Models.FavouritePlatform", b =>
                {
                    b.Property<int>("PlatformId")
                        .HasColumnName("platform_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("PlatformId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourite Platform");
                });

            modelBuilder.Entity("GameStore.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("game_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<float>("Price")
                        .HasColumnName("price");

                    b.HasKey("GameId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GameStore.Models.GameCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<int>("GameId")
                        .HasColumnName("game_id");

                    b.HasKey("CategoryId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("Game Category");
                });

            modelBuilder.Entity("GameStore.Models.GamePlatform", b =>
                {
                    b.Property<int>("PlatformId")
                        .HasColumnName("platform_id");

                    b.Property<int>("GameId")
                        .HasColumnName("game_id");

                    b.HasKey("PlatformId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("Game Platform");
                });

            modelBuilder.Entity("GameStore.Models.Platform", b =>
                {
                    b.Property<int>("PlatforrmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("platforrm_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("PlatforrmId");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("GameStore.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("GameStore.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("GameStore.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("GameStore.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("GameStore.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("GameStore.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Models.CreditCardInfo", b =>
                {
                    b.HasOne("GameStore.Models.AspNetUsers", "User")
                        .WithMany("CreditCardInfo")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKCredit Car111073");
                });

            modelBuilder.Entity("GameStore.Models.FavouriteCategory", b =>
                {
                    b.HasOne("GameStore.Models.Category", "Category")
                        .WithMany("FavouriteCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FKFavourite 786863");

                    b.HasOne("GameStore.Models.AspNetUsers", "User")
                        .WithMany("FavouriteCategory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKFavourite 75428");
                });

            modelBuilder.Entity("GameStore.Models.FavouritePlatform", b =>
                {
                    b.HasOne("GameStore.Models.Platform", "Platform")
                        .WithMany("FavouritePlatform")
                        .HasForeignKey("PlatformId")
                        .HasConstraintName("FKFavourite 872463");

                    b.HasOne("GameStore.Models.AspNetUsers", "User")
                        .WithMany("FavouritePlatform")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKFavourite 99313");
                });

            modelBuilder.Entity("GameStore.Models.GameCategory", b =>
                {
                    b.HasOne("GameStore.Models.Category", "Category")
                        .WithMany("GameCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FKGame Categ52072");

                    b.HasOne("GameStore.Models.Game", "Game")
                        .WithMany("GameCategory")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FKGame Categ302463");
                });

            modelBuilder.Entity("GameStore.Models.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Models.Game", "Game")
                        .WithMany("GamePlatform")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FKGame Platf494386");

                    b.HasOne("GameStore.Models.Platform", "Platform")
                        .WithMany("GamePlatform")
                        .HasForeignKey("PlatformId")
                        .HasConstraintName("FKGame Platf260191");
                });
#pragma warning restore 612, 618
        }
    }
}
